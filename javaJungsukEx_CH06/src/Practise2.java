
public class Practise2 {
	public static void main(String[] args) {
	/*
	 * 메서드(method)는 특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것이다.(즉, 함수)
	 * 메서드의 장점 : 중복코드제거, 관리용이, 재사용가능
	 * 반복적으로 수행되는 여러 문장을 메서드로 작성한다.
	 * 하나의 메서드는 하나의 기능만 수행하도록 작성한다.
	 * 반환타입 메서드이름(타입 변수명, 타입 변수명, ...) // 선언부
	 * {
	 * 	// 구현부
	 * }
	 * 
	 * int add(int a, int b) { 
	 * 		int result= a+b;
	 * 		return result; // 선언부의 반환타입과 반환값의 타입은 일치해야 한다.
	 * }
	 * // a, b, result는 지역변수, 메서드 종료시 자동제거된다.
	 * 	다른 메서드의 lv와 겹치지 않으므로 다른 메서드의 lv와 이름이 같아도 상관없다. 
	 * -선언부
	 * 메서드의 선언부는 후에 변경사항이 발생하지 않도록 신중히 작성 
	 * 선언부를 변경하면 그 메서드가 호출되는 모든 곳을 함께 변경해야 한다.
	 * 매개변수의 선언은 필요한 갯수만큼 선언하며, 두 변수의 타입이 같아도 타입을 생략할 수 없다.
	 * 값을 입력받을 필요가 없다면 ()안에 아무 것도 적지 않는다.
	 * 
	 * 메서드의 결과인 반환값(return)의 타입을 적고 반환값이 없는 경우는 void를 적는다.
	 */		
			
	/* -메서드의 호출
	 * 메서드를 호출할 때 ()안에 지정해준 값들을 인수(argument)또는 인자라 하고, 인자의 개수와 순서는
	 * 호출된 메서드에 선언된 매개변수와 일치해야 한다.
	 * 인수는 메서드가 호출되면 매개변수에 대입되므로 인자의 타입은 매개변수의 타입과 일치하거나 자동 형변환이
	 * 가능한 것이어야 한다.
	 * -메서드의 실행 흐름
	 * 1.객체(인스턴스) 생성
	 * 2.메서드 호출
	 * 3.메서드가 호출되면 지금까지 실행 중이던 메서드는 실행을 잠시 멈추고 호출된 메서드의 문장들이 실행된다.
	 *   호출된 메서드의 작업이 모두 끝나면, 다시 호출한 메서드로 돌아와 이후의 문장들을 실행한다.
	 */
		MM mm= new MM(); // 객체 생성
		int sum1= mm.add(3, 5);
		System.out.println(sum1);
			
		mm.print99danAll();	
	}
}

class MM{
	
	void print99danAll() {
		for(int i= 1; i<= 9; i++) {
			for(int j= 2; j<= 9; j++) {
				System.out.print(j+ "*"+ i+ "=" +(j*i)+ " ");
			}
			System.out.println();
		}
	}
	
	
	int add(int x, int y) {
		int sum= x+ y;
		return sum;
	}
	
	int multiply(int x, int y) {
		int times= x* y;
		return times;
	}
	// 지역변수가 서로 다른 메서드에 있으므로 이름이 같아도 상관없다.
	
}	
	
