
/*
 * 변수의 초기화
 * -변수를 선언하고 처음으로 값을 저장하는 것을 '변수의 초기화'라고 한다.
 * -멤버변수는 초기화를 하지 않아도 자동적으로 변수의 자료형에 맞는 기본값으로 초기화가 이루어지므로
 *  초기화하지 않고 사용해도 되지만, 지역변수는 사용하기 전에 반드시 수동(직접) 초기화해야 한다.
 */
class InitTest {
	int x;	// 인스턴스 변수, 자동으로 0으로 초기화된다.
	int y= x; // 인스턴스 변수
	
	void method() {
		int i; // 지역변수  int i=초기화값; 으로 작성해야 에러나지 않는다.
//		int j= i; // 에러: 지역변수를 초기화하지 않고 사용
		
	}
}

/*
 * 멤버변수의 초기화
 * -지역변수와 달리 멤버변수는 각 타입의 기본값으로 자동 초기화 된다. 그 다음에 명시적 초기화, 초기화 블럭, 
 *  생성자 순으로 초기화 된다. 클래스 변수(cv)가 인스턴스 변수(iv)보다 먼저 초기화 된다.
 * -명시적 초기화 : (=) 대입연산자(선언시), 간단초기화
 *  변수를 선언과 동시에 초기화하는 것을 명시적 초기화하고 한다. 
 *  명시적 초기화가 간단하고 명료하지만 보다 복잡한 작업이 필요할 때는 초기화 블럭 또는 생성자를 사용해야 한다.
 * -초기화 블럭 : 초기화 블럭에는 '클래스 초기화 블럭'과 '인스턴스 초기화 블럭' 두 가지가 있다.
 *  클래스 초기화 블럭( static{ } )은 클래스 변수의 초기화에 사용되고, 
 *  인스턴스 초기화 블럭( { } )과 생성자는 인스턴스 변수의 초기화에 사용된다.
 * -클래스 변수 초기화 시점 : 클래스가 처음 로딩될 때(메모리에 올라갈 때) 단 한번!
 *  인스턴스 변수 초기화 시점 : 인스턴스가 생성될 때마다!
 */

// 명시적 초기화
class Cars {
	int door= 4; // 기본형(primitive type) 변수의 초기화
	Engine e= new Engine(); // 참조형(reference type) 변수의 초기화
	// 참조변수 초기화는 객체를 만들어서 대입연산자를 통해 대입해줘야 한다.
} 

// 초기화 블럭
class StaticBlockTest {
	static int[] arr= new int[10]; // 명시적 초기화, 대입연산자로는 배열생성밖에 할 수 없다.
	
	static { // 클래스 초기화 블럭 : 배열 arr을 난수로 채운다.
		for(int i= 0; i< arr.length; i++) {
			arr[i]= (int)(Math.random()*10)+ 1;
		}
	}
}
 
class Engine {
	
}

class InitTest2{
	static int cv=1;  // 명시적 초기화
	int iv= 1;		  // 명시적 초기화
	
	static { cv= 2; } // 클래스 초기화 블럭
	{iv= 2;}		  // 인스턴스 초기화 블럭
	
	InitTest2() { iv= 3; } // (기본)생성자
	
	InitTest2 it= new InitTest2(); // 생성자
	
	// 초기화 순서 1.cv -> iv   2. 자동 -> 간단 -> 복잡
}
public class Practise5 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
