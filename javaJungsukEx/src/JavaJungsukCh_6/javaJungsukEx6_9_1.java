	/* static 사용
	 * 1. 클래스를 설계할 때, 멤버변수 중 모든 인스턴스에 공통으로 사용하는 것에 static를 붙인다.
	 *  -모든 인스턴스에서 같은 값이 유지되어야 하는 변수는 static을 붙여서 클래스 변수로 정의
	 * 2. 클래스 변수(static변수)는 인스턴스를 생성하지 않아도 사용할 수 있다.
	 *  -static이 붙은 변수는 클래스가 메모리에 올라갈 때 이미 자동적으로 생성
	 * 3. 클래스 메서드(static메서드)는 인스턴스 변수를 사용할 수 없다.
	 *  -인스턴스변수는 인스턴스가 반드시 존재해야만 사용할 수 있는데, 클래스매서드(static이 붙은 메서드)
	 *  는 인스턴스 생성없이 호출가능하므로 메서드가 호출되었을 때 인스턴스가 존재하지 않을 수도 있다.
	 *  그래서 클래스 메서드에서 인스턴스변수의 사용을 금지한다. 반면에 인스턴스변수나 인스턴스메서드에서는 
	 *  static이 붙은 멤버들을 사용하는 것이 언제나 가능하다.인스턴스 변수가 존재한다는 것은 static
	 *  변수가 이미 메모리에 존재한다는 것을 의미하기 때문이다.
	 * 4. 메서드 내에서 인스턴스 변수를 사용하지 않는다면, static을 붙이는 것을 고려한다.
	 *  -메서드의 작업내용 중에서 인스턴스변수를 필요로 한다면, static을 붙일 수 없다. 반대로 인스턴스
	 *  변수를 필요로 하지 않는다면 static을 붙이자. 메서드 호출시간이 짧아지므로 성능이 향상된다.
	 *  
	 * -클래스의 멤버변수 중 모든 인스턴스에 공통된 값을 유지해야하는 것이 있는지 살펴보고 있으면 static을 
	 * 붙여준다.
	 * -작성한 메서드 중에서 인스턴스 변수나 인스턴스 메서드를 사용하지 않는 메서드에 static을 붙일 것을
	 * 고려한다.
	 * -속성 중에서 공통속성에 붙인다.
	 * -인스턴스 멤버를 사용하지 않는 메서드에 static을 불인다.
	 * -static 메서드는 static 메서드 호출가능
	 * -static 메서드는 인스턴스 변수 사용불가
	 * -static 메서드는 인스턴스 메서드 호출불가
	 * -static 메서드는 인스턴스 멤버 사용불가
	 */

//	class Testclass{
//		void instanceMethod() {}  		// 인스턴스메서드
//		static void staticMethod() {} 	// static메서드
//		
//		void instnaceMethod2() { 	//인스턴스메서드
//			instanceMethod(); 		// 다른 인스터스메서드를 호출한다.
//			staticMethod();	  		// static메서드를 호출한다.
//		}
//		
//		static void staticMethod2() { // static메서드(항상 호출 가능)
////			instanceMethod(); 		// 에러!! 인스턴스메서드를 호출할 수 없다.
//			// iv로 작업하는 메서드(iv를 사용), 객체가 필요
//			staticMethod();	  		// static메서드는 호출할 수 있다.
//		}
//	} // end of class
	// 같은 클래스 내의 메서드는 서로 객체의 생성이나 참조변수 없이 직접 호출이 가능하지만 
	// static메서드는 인스턴스 메서드를 호출할 수 없다.
	
//	class TestClass2 {
//		int iv;			// 인스턴스 변수(객체 생성 후 사용가능)
//		static int cv;  // 클래스 변수(언제나 사용가능)
//		
//		void instnaceMethod() {		 // 인스턴스 메서드(객체 생성후 호출가능)
//			System.out.println(iv);	 // 인스턴스 변수를 사용할 수 있다.
//			System.out.println(cv);	 // 클래스 변수를 사용할 수 있다.
//		}
//		
//		static void staticMethod() { // static메서드
////			System.out.println(iv);	 // 에러!! 인스턴스 변수를 사용할 수 없다.
//			System.out.println(cv);	 // 클래스 변수는 사용할 수 있다.
//		}
//	} // end of class
	// 인스턴스 메서드는 인스턴스 변수를 사용할 수 있지만, static메서드는 인스턴스 변수를 사용할 수 없다.

